// Copyright 2014 tsuru authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package app

import (
	"strings"

	"github.com/tsuru/config"
	"github.com/tsuru/tsuru/db"
	appTypes "github.com/tsuru/tsuru/types/app"
	"gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"
)

func SavePlan(plan appTypes.Plan) error {
	if plan.Name == "" {
		return appTypes.PlanValidationError{Field: "name"}
	}
	if plan.CpuShare < 2 {
		return appTypes.ErrLimitOfCpuShare
	}
	if plan.Memory > 0 && plan.Memory < 4194304 {
		return appTypes.ErrLimitOfMemory
	}
	conn, err := db.Conn()
	if err != nil {
		return err
	}
	defer conn.Close()
	if plan.Default {
		_, err = conn.Plans().UpdateAll(bson.M{"default": true}, bson.M{"$unset": bson.M{"default": false}})
		if err != nil {
			return err
		}
	}
	err = conn.Plans().Insert(plan)
	if err != nil && strings.Contains(err.Error(), "duplicate key") {
		return appTypes.ErrPlanAlreadyExists
	}
	return err
}

func PlansList() ([]appTypes.Plan, error) {
	conn, err := db.Conn()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	var plans []appTypes.Plan
	err = conn.Plans().Find(nil).All(&plans)
	return plans, err
}

func findPlanByName(name string) (*appTypes.Plan, error) {
	conn, err := db.Conn()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	var plan appTypes.Plan
	err = conn.Plans().Find(bson.M{"_id": name}).One(&plan)
	if err != nil {
		if err == mgo.ErrNotFound {
			return nil, appTypes.ErrPlanNotFound
		}
		return nil, err
	}
	return &plan, nil
}

func DefaultPlan() (*appTypes.Plan, error) {
	conn, err := db.Conn()
	if err != nil {
		return nil, err
	}
	defer conn.Close()
	var plans []appTypes.Plan
	err = conn.Plans().Find(bson.M{"default": true}).All(&plans)
	if err != nil {
		return nil, err
	}
	if len(plans) == 0 {
		// For backard compatibility only, this fallback will be removed. You
		// should have at least one plan configured.
		configMemory, _ := config.GetInt("docker:memory")
		configSwap, _ := config.GetInt("docker:swap")
		return &appTypes.Plan{
			Name:     "autogenerated",
			Memory:   int64(configMemory) * 1024 * 1024,
			Swap:     int64(configSwap-configMemory) * 1024 * 1024,
			CpuShare: 100,
		}, nil
	}
	if len(plans) > 1 {
		return nil, appTypes.ErrPlanDefaultAmbiguous
	}
	return &plans[0], nil
}

func PlanRemove(planName string) error {
	conn, err := db.Conn()
	if err != nil {
		return err
	}
	defer conn.Close()
	err = conn.Plans().RemoveId(planName)
	if err == mgo.ErrNotFound {
		return appTypes.ErrPlanNotFound
	}
	return err
}
